/*******************************************************************************
* Function name: App_ExtComLineDataProcess(u16 u16Qmode,i16 i16Data,f32 f32Data)
* @brief PMBus Linear11格式转换函数  X=Y*2^N
* @param[in] u16Qmode:定点型DSP系统     i16Data:定点型DSP系统使用的传入数据.   f32Data:F浮点型DSP系统使用的传入数据，float型数据
* @param[out] Word
* @retval N/A
* @author M3344
* @date 20211215
*******************************************************************************/
///<整形16位数据定义
typedef union
{
    struct
    {
        u8 ByteL:8;        ///<低8位
        u8 ByteH:8;        ///<高8位
    };
    struct
    {
        u16 Xdata:11;        ///<低11位
        u16 Ndata:5;         ///<高5位
    };
    u16  u16WordData;
}WORD_DATA_T;
u16 App_ExtComLineDataProcess(u16 u16Qmode,i16 i16Data,f32 f32Data)
{
    i16 i16Ndata =0;///用来保存N的值
    i16 i16Xdata =0;///用来保存Y值
    i16 i16Temp =0;///进行传入数据变换*2^N或/2^N
    i16 i16Tmp = 0;///在定点DSP，对传入数据进行/2^N保存
    f32 f32Temp =0.0f;
    f32 f32TempStore =0.0f;    //用来保存转换前传入的实际数据
    u8 u8Dex =0;
    i16 i16Dex = 0;
    u16 u16IqMode = 0;///定点
    WORD_DATA_T u16ReTurnData;

    if(i16Data == 0)           ///判断是否为定点或浮点数据
    {
        f32TempStore = f32Data;
        f32Temp = f32Data;    
        if(f32Temp < 0.0f)         ///取传入数据绝对值
        {
            f32Temp = (-f32Temp);
        }
    }
    else                                        ///使用定点DSP的数据转换
    {
        u16IqMode = (1U << u16Qmode);
        i16Tmp = (i16Data / (i16)u16IqMode);
        f32Temp = (f32)i16Tmp;
        f32TempStore = f32Temp;         
        if(f32Temp < 0.0f)                          
        {
            f32Temp = (-f32Temp);
        }
    }
    i16Temp = (i16)f32Temp;
    if(i16Temp < 512)        ///这里因为要放大2倍，如果＞512乘以2就会大于1024数据会溢出，位数越大，精度越高，在保证Y的精度时也要保证N的精度
    {
        for(u8Dex = 0;u8Dex < 9U;u8Dex++)             ///循环用来放大*2^N
        {

            if(u8Dex == 0U)///第0位数据2^0=1
            {
                i16Temp = i16Temp;///X=Y*2^0=Y
                i16Dex = 1;
            }
            else
            {
                i16Temp = i16Temp * 2;///X=Y*2^(N+1）
                i16Dex = i16Dex * 2;///用来记录乘以多少个2
            }

            if(i16Temp < 512)///判断放大的数据有无超过512
            {
                i16Ndata = 0-(i16)u8Dex;///获取N
                f32Temp = f32TempStore * (f32)(i16Dex);
                i16Xdata =(i16)(f32Temp);
            }
            else
            {
                break;                                      
            }
        }

    }
    else                //如果小于1024或者>(-1024)数据就不放大不缩小，如果1024＞或者＜(-1024)数据就会缩小处理
    {
        for(u8Dex = 0;u8Dex < 6U;u8Dex++)                        ///<锟斤拷嗟�5     32*1024= 35840
        {
            if(u8Dex == 0U)
            {
                i16Temp = i16Temp;
                i16Dex = 1;
            }
            else
            {
                i16Temp = i16Temp / 2;
                i16Dex = i16Dex * 2;
            }
            if(i16Temp >= 512)
            {
                i16Ndata = (i16)u8Dex;
                f32Temp = f32TempStore/(f32)i16Dex;
                i16Xdata =(i16)(f32Temp);
            }
            else
            {
                break;                                     ///<锟斤拷锟斤拷循锟斤拷锟斤拷
            }
        }

    }
    u16ReTurnData.Ndata = i16Ndata;
    u16ReTurnData.Xdata = i16Xdata;
    return(u16ReTurnData.u16WordData);
}
上面是PMBus转换为linear11格式
    u32_r97_read_pin = (u32)App_ExtComLineDataProcess(0,0,(g_tIntComVar.tPfc2DcdcMntData.f32Iin * g_tIntComVar.tPfc2DcdcCtrlData.f32Vin)); // linear11 g_tDataProcessVar.tMeasure.f32Pin
    slave_cmd.page0.r97_read_pin.u32Val = ((u32_r97_read_pin << 8) & 0x00FF0000) | (u32_r97_read_pin & 0x000000FF);
上面代码是在主函数中调用帮我解释一下
